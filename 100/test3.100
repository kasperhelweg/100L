int main()
{
  /*
    En Lval kan have typerne char, int, char* og int *
    En Exp kan have typerne int, char* og int*, men ikke char.
    Når en Lval bruges som en Exp (produktionen Exp -> Lval) konverteres char til int
    Når en værdi lægges i en Lval (produktionen Exp -> Lval = Exp) og denne Lval har type char, skal udtrykket have typen int.  Kun de sidste 8 bit af værdien af udtrykket gemmes i Lval.
    Når en funktion med et argument af typen char kaldes, overføres kun 8 bit.  Da en parameter altid fylder 32 bit, kan gøres dette ved f.eks. at nulstille de resterende 24 bit.
    Når en funktion med resultattype char returnerer overføres kun 8 bit.  Det sker som ved parameteroverførsel.
  */
  int n, a, b;
  int *c;

  c[2] = 'a';
  
 n = getint();	
 
 if (a == b){
    if (a == b) {
      return 0;
    } else {
      if (a == b)
	return a;
	if (a == b)
	  return a;
    }
  } else { 
    return a + b;
  }
 
 
 return 0;
  
  a = 2;
  if (a==a){
    a + a;
  }
  else{
  }
    
  
  
}

int hell(){
  
  return 0;

}

/*
int hell(char a){

  int *b;


 
  if (a == b){
    if (a == b) {
      return 0;
    } else {
      if (a == b)
	return 0;
    }
  } else { 
    return a + b;
  }
  
  while (2 == 10){
    a = 2;
   }
   
   c = 2 + 2;
  
  
  hell(2); 
  
  return 1;
}
*/




/*

[(S100.Int(1, 0), S100.Val("main", (1, 4)), [],
      S100.Block([(S100.Int(71, 3), [S100.Val("a", (71, 7))]),
                  (S100.Int(72, 3), [S100.Val("b", (72, 7))])],
                 [S100.If(S100.Equal(S100.LV(S100.Var("a", (74, 7))),
                                     S100.LV(S100.Var("b", (74, 12))),
                                     (74, 9)),
                          S100.Return(S100.LV(S100.Var("a", (75, 12))),
                                      (75, 5)), (74, 3)),
                  S100.Return(S100.LV(S100.Var("a", (77, 10))), (77, 3))],
                 (70, 1)), (1, 8)),
     (S100.Char(82, 1), S100.Val("hell", (82, 6)),
      [(S100.Char(82, 11), [S100.Val("a", (82, 16))])],
      S100.Block([], [S100.Return(S100.LV(S100.Var("a", (85, 10))), (85, 3))],
                 (83, 1)), (82, 10))] :








 [(S100.Int(1, 0), S100.Val("main", (1, 4)), [],
      S100.Block([(S100.Int(20, 3), [S100.Val("a", (20, 7))]),
                  (S100.Int(21, 3), [S100.Ref("b", (21, 8))])],
                 [S100.EX(S100.Assign(S100.Var("a", (23, 3)),
                                      S100.NumConst(2, (23, 7)), (23, 5))),
                  S100.EX(S100.Assign(S100.Deref("b", (24, 3)),
                                      S100.NumConst(3, (24, 8)), (24, 6))),
                  S100.Return(S100.LV(S100.Var("b", (26, 10))), (26, 3))],
                 (19, 1)), (1, 8)),
     (S100.Char(29, 1), S100.Ref("hell", (29, 7)),
      [(S100.Char(29, 12), [S100.Ref("a", (29, 18))])],
      S100.Block([], [S100.Return(S100.LV(S100.Var("a", (31, 10))), (31, 3))],
                 (30, 1)), (29, 11))] :
*/
